// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TONEMAPPING 2
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_COMPOSE_GROUP_SIZE_X, local_size_y = COMPUTE_COMPOSE_GROUP_SIZE_Y, local_size_z = 1) in;

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    if (pix.x >= uint(globalUniform.renderWidth) || pix.y >= uint(globalUniform.renderHeight))
    {
        return;
    }

#ifdef DEBUG_SHOW_SH
    ivec2 checkSHRange = ivec2(800, 400);

    if (pix.x < checkSHRange.x && pix.y < checkSHRange.y)
    {
        vec2 uv = vec2(pix.x / float(checkSHRange.x), pix.y / float(checkSHRange.y));

        float theta = uv.x * 2.0 * M_PI;
        float phi = uv.y * M_PI;
        vec3 normal = vec3(cos(theta) * sin(phi), sin(theta) * sin(phi), cos(phi));

        ivec2 centerPix = ivec2(globalUniform.renderWidth * 0.5, globalUniform.renderHeight * 0.5);
        SH indirSH = texelFetchSH(
            //framebufUnfilteredIndirectSH_R_Sampler, framebufUnfilteredIndirectSH_G_Sampler, framebufUnfilteredIndirectSH_B_Sampler,
            framebufIndirPongSH_R_Sampler, framebufIndirPongSH_G_Sampler, framebufIndirPongSH_B_Sampler, 
            getCheckerboardPix(centerPix));

        imageStore(framebufPreFinal, pix, vec4(SHToIrradiance(indirSH, normal), 0));
        return;
    }
#endif

    vec3 color = imageLoad(framebufPreFinal, pix).rgb;

    const vec4 albedo = texelFetchAlbedo(getCheckerboardPix(pix));
    
    // if not sky
    if (!isSky(albedo))
    {
        const float lIn = max(getLuminance(color), exp2(globalUniform.minLogLuminance));
        const float lInAdj = lIn / tonemapping.avgLuminance;
        // Reinhard
        const float lOut = lInAdj * (1.0f + (lInAdj / (globalUniform.luminanceWhitePoint * globalUniform.luminanceWhitePoint))) / (1.0f + lInAdj);
        
        color = color * lOut / lIn;

        
        // alpha channel of albedo contains screenEmission
        const vec3 e = albedo.rgb * albedo.a * globalUniform.emissionMaxScreenColor;
        color = mix(color, e, clamp((e.x + e.y + e.z) / 3.0, 0.0, 1.0));
    }
    else
    {
        if (globalUniform.bloomIntensity > 0.0)
        {
            // if bloom is enabled, need to minimize the color difference between sky and scene
            // this fixes it (a good way to avoid this is to bring HDR sky) 
            color /= max(0.001, globalUniform.bloomSkyMultiplier * 2);

            color += albedo.rgb;
        }
        else
        {
            color = albedo.rgb;
        }
    }

    if (globalUniform.dbgShowGradients != 0)
    {
        const vec4 gradDS = texelFetch(framebufDiffAndSpecPingGradient_Sampler, getCheckerboardPix(pix) / COMPUTE_ASVGF_STRATA_SIZE, 0);
        const vec4 gradI = texelFetch(framebufIndirPingGradient_Sampler, getCheckerboardPix(pix) / COMPUTE_ASVGF_STRATA_SIZE, 0);
        const float lambda = getAntilagAlpha(gradDS.r, gradDS.g);
        const float lambdaSpec = getAntilagAlpha(gradDS.b, gradDS.a);
        const float lambdaIndir = clamp(gradI.r, 0.0, 1.0);
        color.rgb = vec3(lambda, lambdaSpec, lambdaIndir);
    }

    if (globalUniform.dbgShowMotionVectors != 0)
    {
        const vec2 m = texelFetch(framebufMotion_Sampler, getCheckerboardPix(pix), 0).rg;
        color.r = abs(m.r);
        color.g = abs(m.g);
        color.b = 0;
    }
        
    imageStore(framebufPreFinal, pix, vec4(color, 0));
}