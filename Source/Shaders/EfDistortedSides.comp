// Copyright (c) 2022 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

struct EffectDistortedSides_PushConst
{
    // not vec4 for padding
    float colorTintBlend;
    float colorTint_R;
    float colorTint_G;
    float colorTint_B;
};

#define EFFECT_PUSH_CONST_T EffectDistortedSides_PushConst
#include "EfSimple.inl"

vec3 applyTint(vec3 color)
{
    vec3 tint = vec3(push.custom.colorTint_R, push.custom.colorTint_G, push.custom.colorTint_B);
    
    float t = push.custom.colorTintBlend * getLuminance(color) * getProgress();
    return mix(color, tint, t);
}

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 c = effect_getCenteredFromPix(pix);

    // more distortion toward the edges
    float t = c.x * c.x * getProgress();
    c.x = mix(c.x, c.x * c.x * sign(c.x), t);

    vec3 rgb = effect_loadFromSource_Centered(c);

    effect_storeToTarget(applyTint(rgb), pix);
}