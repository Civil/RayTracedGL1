// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// Copyright (c) 2018, Christoph Schied
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Karlsruhe Institute of Technology nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#version 460

// "Spatiotemporal Variance-Guided Filtering: Real-Time Reconstruction for Path-Traced Global Illumination", C.Schied et al.
// 4.1 Temporal Filtering

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_SVGF_GROUP_SIZE_X, local_size_y = COMPUTE_SVGF_GROUP_SIZE_Y, local_size_z = 1) in;

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (pix.x >= uint(globalUniform.renderWidth) || pix.y >= uint(globalUniform.renderHeight))
    {
        return;
    }

    const vec2 motion = texelFetch(framebufMotion_Sampler, pix, 0).rg;
    const vec2 posPrev = getPrevScreenPos(pix, motion);

    const ivec2 pixPrev = ivec2(floor(posPrev - 0.5));
    const vec2 subPix = (posPrev - 0.5) - floor(posPrev - 0.5);

    const float bilinearWeights[2][2] = 
    {
        { (1.0 - subPix.x) * (1.0 - subPix.y), subPix.x * (1.0 - subPix.y) },
        { (1.0 - subPix.x) * subPix.y,         subPix.x * subPix.y         },
    };

    const vec3 depthFB = texelFetch(framebufDepth_Sampler,              pix, 0).rgb;
    const vec3 color   = texelFetch(framebufUnfilteredDirect_Sampler,   pix, 0).rgb;
    const vec3 normal  = texelFetch(framebufNormalGeometry_Sampler,     pix, 0).rgb;
    const float depth  = depthFB.r;
    const float dz = 1.0 / max(0.01, length(depthFB.gb));

    const float l = getLuminance(color);
    const vec2 moments = vec2(l, l * l);

    vec3 colorPrev = vec3(0.0);
    vec2 momentsPrev = vec2(0.0);
    float weightSum = 0.0;
    float historyLength = 0.0;

    // 2x2 tap bilinear interpolation
    for (int yy = 0; yy <= 1; yy++)
    {
        for(int xx = 0; xx <= 1; xx++)
        {
            const ivec2 xy = pixPrev + ivec2(xx, yy);

            const float depthPrev = texelFetch(framebufDepth_Prev_Sampler,          xy, 0).r;
            const vec3 normalPrev = texelFetch(framebufNormalGeometry_Prev_Sampler, xy, 0).rgb;

            const bool isConsistent = 
                testInside(xy, screenSize) &&
                testReprojectedDepth(depth, depthPrev, dz) &&
                testReprojectedNormal(normal, normalPrev);

            if (isConsistent)
            {
                const float weight = bilinearWeights[yy][xx];

                colorPrev     += texelFetch(framebufColorHistory_Sampler,            xy, 0).rgb * weight;
                momentsPrev   += texelFetch(framebufAccumMoments_Prev_Sampler,       xy, 0).rg  * weight;
                historyLength += texelFetch(framebufAccumHistoryLength_Prev_Sampler, xy, 0).r   * weight;

                weightSum += weight;
			}
        }
    }

    vec3 colorAccum;
    vec2 momentsAccum;
    float historyLengthAccum;

    // found consistent info
    if (weightSum > 0.01)
    {
        const float invWeightSum = 1.0 / weightSum;

        colorPrev     *= invWeightSum;
        momentsPrev   *= invWeightSum;
        historyLength *= invWeightSum;
        
        float antilagAlpha = 0.0;
        const int AlphaFilterSize = 1;
        for (int yy = -AlphaFilterSize; yy <= AlphaFilterSize; yy++)
        {
            for (int xx = -AlphaFilterSize; xx <= AlphaFilterSize; xx++)
            {
                const vec2 gradGB = texelFetch(framebufPingGradient_Sampler, 
                                               pix / COMPUTE_ASVGF_STRATA_SIZE + ivec2(xx, yy), 0).rg;
                
                const float gradSample = gradGB.r;
                const float normFactor = gradGB.g;

                const float lambda = normFactor > 0.0001 ? 
                    clamp(abs(gradSample) / normFactor, 0.0, 1.0) :
                    0.0;

                antilagAlpha = max(antilagAlpha, lambda);
            }
        }

        antilagAlpha = clamp(antilagAlpha, 0.0, 1.0);

        const float minAlpha = 0.01;
        const float minAlphaMoments = 0.01;

        float alphaColor   = max(minAlpha,        1.0 / (historyLength + 1.0));
        float alphaMoments = max(minAlphaMoments, 1.0 / (historyLength + 1.0));

        alphaColor   = mix(alphaColor,   1.0, antilagAlpha);
        alphaMoments = mix(alphaMoments, 1.0, antilagAlpha);

        colorAccum = mix(colorPrev, color, alphaColor);
        momentsAccum = mix(momentsPrev, moments, alphaMoments);
        historyLengthAccum = min(64, historyLength + 1.0);
    }
    else
    {
        colorAccum = color;
        momentsAccum = moments;
        historyLengthAccum = 1.0;
    }

    imageStore(framebufAccumColor, pix, vec4(colorAccum, 0.0));
    imageStore(framebufAccumMoments, pix, vec4(momentsAccum, 0.0, 0.0));
    imageStore(framebufAccumHistoryLength, pix, vec4(historyLengthAccum));
}