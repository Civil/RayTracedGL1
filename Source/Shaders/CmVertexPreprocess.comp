// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define VERTEX_BUFFER_WRITEABLE
#define DESC_SET_GLOBAL_UNIFORM 0
#define DESC_SET_VERTEX_DATA 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_VERT_PREPROC_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1) in;

layout (constant_id = 0) const uint preprocessMode = VERT_PREPROC_MODE_ONLY_DYNAMIC;

layout(push_constant) uniform Push_BT
{
    ShVertPreprocessing push;
};

vec3 getTangent(const vec3 localPos[3], const vec3 normal, const vec2 texCoord[3])
{
    const vec3 e1 = localPos[1] - localPos[0];
    const vec3 e2 = localPos[2] - localPos[0];

    const vec2 u1 = texCoord[1] - texCoord[0];
    const vec2 u2 = texCoord[2] - texCoord[0];

    const float invDet = 1.0 / (u1.x * u2.y - u2.x * u1.y);

    const vec3 tangent   = normalize((e1 * u2.y - e2 * u1.y) * invDet);
    const vec3 bitangent = normalize((e2 * u1.x - e1 * u2.x) * invDet);

    // Don't store bitangent, only store cross(normal, tangent) handedness.
    // If that cross product and bitangent have the same sign,
    // then handedness is 1, otherwise 0
    float handedness = float(dot(cross(normal, tangent), bitangent) > 0.0);
    handedness = handedness * 2.0 - 1.0;

    return encodeTangent4(tangent, handedness);
}

void main()
{    
    uint tlasInstanceIndex = gl_WorkGroupID.x;
    
    bool isDynamic;
    
    // if not skybox
    if (tlasInstanceIndex < push.tlasInstanceCount)
    {
        isDynamic = (push.tlasInstanceIsDynamicBits[tlasInstanceIndex / 32] & (1 << tlasInstanceIndex)) != 0;
    }
    else
    {
        isDynamic = (push.skyboxTlasInstanceIsDynamicBits[tlasInstanceIndex / 32] & (1 << tlasInstanceIndex)) != 0;

        // skybox offset
        tlasInstanceIndex += MAX_TOP_LEVEL_INSTANCE_COUNT;
    } 


    // always process dynamic
    if (isDynamic)
    {
        #define VERTEX_PREPROCESS_PARTIAL_DYNAMIC
        #include "VertexPreprocessPartial.inl"
    }
    /*else if (preprocessMode == VERT_PREPROC_MODE_DYNAMIC_AND_MOVABLE)
    {       
        #define VERTEX_PREPROCESS_PARTIAL_STATIC_MOVABLE
        #include "VertexPreprocessPartial.inl"
    }*/
    else if (preprocessMode == VERT_PREPROC_MODE_ALL)
    {       
        #define VERTEX_PREPROCESS_PARTIAL_STATIC_ALL
        #include "VertexPreprocessPartial.inl"
    }
}