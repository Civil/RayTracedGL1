// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define RAYGEN_SHADOW_PAYLOAD
#include "RaygenCommon.h"

void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);

    // reset unfiltered only after forward-projecting and merging samples
    imageStoreUnfilteredIndirectSH(pix, newSH());

    const float depth = texelFetch(framebufDepth_Sampler, pix, 0).r;

    if (depth > MAX_RAY_LENGTH)
    {
        imageStore(framebufUnfilteredDirect, pix, vec4(0.0));
        imageStore(framebufUnfilteredSpecular, pix, vec4(0.0));
        return;
    }
    
    const vec4 surfPosition           = texelFetch(framebufSurfacePosition_Sampler, pix, 0);
    const vec4 surfNormal             = texelFetch(framebufNormal_Sampler, pix, 0);
    const vec4 surfNormalGeom         = texelFetch(framebufNormalGeometry_Sampler, pix, 0);
    const vec4 surfMetallicRoughness  = texelFetch(framebufMetallicRoughness_Sampler, pix, 0);
    const vec4 viewDirection          = texelFetch(framebufViewDirection_Sampler, pix, 0);
    const uint grFB                   = texelFetch(framebufGradientSamples_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0).x;
    const float surfRoughness         = surfMetallicRoughness.g;
    const uint instCustomIndex        = floatBitsToUint(surfNormal.a);

    const bool isGradientSample       = (pix.x % COMPUTE_ASVGF_STRATA_SIZE) == (grFB % COMPUTE_ASVGF_STRATA_SIZE) &&
                                        (pix.y % COMPUTE_ASVGF_STRATA_SIZE) == (grFB / COMPUTE_ASVGF_STRATA_SIZE);
    
    vec3 diffuse, specular;
    processDirectIllumination(pix, instCustomIndex, surfPosition.xyz, surfNormal.xyz, surfNormalGeom.xyz, surfRoughness, -viewDirection.xyz, isGradientSample, diffuse, specular);

    imageStore(framebufUnfilteredDirect, pix, vec4(diffuse, 0.0));
    imageStore(framebufUnfilteredSpecular, pix, vec4(specular, 0.0));
}