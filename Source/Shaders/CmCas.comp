// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = 64) in;

layout(constant_id = 0) const uint sourceFramebufIndex = 0;

layout(push_constant) uniform CasPush_BT
{
    uvec4 con0;
    uvec4 con1;
} push;

    // CAS impl
    #define A_GPU 1
    #define A_GLSL 1
    #define A_HALF 1
    #define CAS_PACKED_ONLY 1
    #include "CAS/ffx_a.h"

    // CAS should operate in linear space 
    AF3 loadInput(const ASU2 p) 
    {    
        switch (sourceFramebufIndex)
        {
            case FB_IMAGE_INDEX_FINAL:         texelFetch(framebufFinal_Sampler, p, 0).rgb; 
            case FB_IMAGE_INDEX_UPSCALED_PONG: texelFetch(framebufUpscaledPong_Sampler, p, 0).rgb;   
        }

        return AF3(0);
    }

    void storeOutput(const ASU2 p, const AF4 color)
    {
        imageStore(framebufUpscaledPing, p, color);
    }

    AH3 CasLoadH(const ASW2 p) 
    {
        return AH3(loadInput(ASU2(p)));
    }
    void CasInputH(inout AH2 r, inout AH2 g, inout AH2 b) {}
    #include "CAS/ffx_cas.h"

void applyCas()
{
    const bool sharpenOnly = true;
    AU2 gxy = ARmp8x8(gl_LocalInvocationID.x) + AU2(gl_WorkGroupID.x << 4u, gl_WorkGroupID.y << 4u);

    AH4 c0,c1;
    AH2 cR, cG, cB;

    CasFilterH(cR, cG, cB, gxy, push.con0, push.con1, sharpenOnly);
    CasDepack(c0, c1, cR, cG, cB);
    storeOutput(ASU2(gxy)             , AF4(c0));
    storeOutput(ASU2(gxy) + ASU2(8, 0), AF4(c1));

    gxy.y += 8u;
    CasFilterH(cR, cG, cB, gxy, push.con0, push.con1, sharpenOnly);
    CasDepack(c0, c1, cR, cG, cB);
    storeOutput(ASU2(gxy)             , AF4(c0));
    storeOutput(ASU2(gxy) + ASU2(8, 0), AF4(c1));
}

AF4 sharp(const ASU2 p)
{
    const float w = 1.0;

    const AF3 r = 
        loadInput(p             )  * (1 + 4 * w) +
        loadInput(p + ASU2( 0, 1)) * (-w) +
        loadInput(p + ASU2( 1, 0)) * (-w) +
        loadInput(p + ASU2( 0,-1)) * (-w) +
        loadInput(p + ASU2(-1, 0)) * (-w);

    return AF4(r, 0);
}

void applySimpleSharp()
{
    ASU2 gxy = ASU2(ARmp8x8(gl_LocalInvocationID.x) + AU2(gl_WorkGroupID.x << 4u, gl_WorkGroupID.y << 4u));
    storeOutput(gxy, sharp(gxy));

    gxy.x += 8;
    storeOutput(gxy, sharp(gxy));

    gxy.y += 8;
    storeOutput(gxy, sharp(gxy));

    gxy.x -= 8;
    storeOutput(gxy, sharp(gxy));
}

void main()
{
    const uint useSimpleSharp = 1;

    if (useSimpleSharp != 0)
    {
        applySimpleSharp();
    }
    else 
    {
        applyCas();
    }
}