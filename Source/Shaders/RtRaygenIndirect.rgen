// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define RAYGEN_SHADOW_PAYLOAD
#include "RaygenCommon.h"

// v -- direction to viewer
// n -- surface normal
void getBounce(
    uint seed, vec3 n, float roughness, 
    vec3 v, out vec3 bounceDirection, inout vec3 throughput, out bool isSpecular)
{
    vec4 u = getBlueNoiseSample(seed);

    // trace either specular or diffuse ray
    float specPr = 0.5;
    float nonSpecPr = 1 - specPr;
    isSpecular = u[0] < specPr;

    if (isSpecular)
    {
        // sample microfacet normal
        vec3 m = sampleSmithGGX(n, v, roughness, u[0], u[1]);

        // light sample; incident vector must point to surface
        vec3 l = reflect(-v, m);

        float nl = max(dot(n, l), 0.0);
        float nv = max(dot(n, v), 0.0);

        if (nl > 0 && nv > 0)
        {
            bounceDirection = l;
            
            // "Sampling the GGX Distribution of Visible Normals", Heitz
            // equation 19: F * G2(v,l) / G1(v)
            // let G2 be the simplest: G2(v,l) = G1(v) * G1(l)
            // => F * G1(l)
            
            float F = 1.0f; // getFresnelSchlick(nl, n1, n2);
            float G1 = G1GGX(l, n, roughness);

            throughput *= G1;
            throughput *= 1 / specPr;

            return;
        }
    }

    float pdf;
    bounceDirection = sampleLambertian(n, u[0], u[1], pdf);
    throughput *= evalBRDFLambertian(1.0) / pdf;
    throughput *= 1 / nonSpecPr;
}

// v -- direction to viewer
void processIndirectIllumination(
    ivec2 pix, uint primaryInstCustomIndex, vec3 surfPosition, 
    vec3 surfNormal, vec3 surfNormalGeom,
    float surfRoughness, vec3 v)
{
    uint seed = getCurrentRandomSeed(pix);
    
    vec3 throughput = vec3(1.0);
    
    bool isSpecular;
    vec3 bounceDirection;
    getBounce(seed, surfNormal, surfRoughness, v, bounceDirection, throughput, isSpecular);

    // got the bounce direction, trace ray
    ShPayload p = traceIndirectRay(primaryInstCustomIndex, surfPosition, bounceDirection); 

    vec3 contribution;

    if (p.clsHitDistance > 0)
    {
        ShHitInfo h = getHitInfo(p);
        vec3 hitPos = surfPosition + p.clsHitDistance * bounceDirection;
        
        // TODO: emmision

        // calculate direct illumination in hit position
        vec3 diffuse, specular;
        processDirectIllumination(pix, primaryInstCustomIndex, hitPos, h.normal, h.normalGeom, h.roughness, bounceDirection, diffuse, specular);

        throughput *= h.albedo;

        //contribution = throughput * (diffuse * (1 - metallic) + specular * metallic);
        contribution = throughput * diffuse;
    }
    else
    {
        vec3 skyColor = getSky(bounceDirection);
        contribution = throughput * skyColor;
    }

    if (isSpecular)
    {
        vec3 spec = imageLoad(framebufLightSpecular, pix).rgb;
        spec += contribution;

        imageStore(framebufLightSpecular, pix, vec4(spec, 0.0));
    }
    else
    {
        vec3 diff = imageLoad(framebufLightIndirect, pix).rgb;
        diff += contribution;

        imageStore(framebufLightIndirect, pix, vec4(diff, 0.0));
    }
}

void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);

    vec4 depth = texelFetch(framebufDepth_Sampler, pix, 0);

    if (depth.x > MAX_RAY_LENGTH - 1.0f)
    {
        return;
    }
    
    vec4 surfPosition           = texelFetch(framebufSurfacePosition_Sampler, pix, 0);
    vec4 surfNormal             = texelFetch(framebufNormal_Sampler, pix, 0);
    vec4 surfNormalGeom         = texelFetch(framebufNormalGeometry_Sampler, pix, 0);
    vec4 surfMetallicRoughness  = texelFetch(framebufMetallicRoughness_Sampler, pix, 0);
    vec4 viewDirection          = texelFetch(framebufViewDirection_Sampler, pix, 0);
    float surfRoughness         = surfMetallicRoughness.g;
    uint instCustomIndex        = floatBitsToUint(surfNormal.a);

    processIndirectIllumination(pix, instCustomIndex, surfPosition.xyz, surfNormal.xyz, surfNormalGeom.xyz, surfRoughness, -viewDirection.xyz);        
}