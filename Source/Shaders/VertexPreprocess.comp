// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define VERTEX_BUFFER_WRITEABLE
#define DESC_SET_GLOBAL_UNIFORM 0
#define DESC_SET_VERTEX_DATA 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_VERT_PREPROC_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1) in;

layout (constant_id = 0) const uint preprocessMode = VERT_PREPROC_MODE_ONLY_DYNAMIC;

layout(push_constant) uniform Push_BT 
{
    uint tlasInstanceCount;
    uint skyboxTlasInstanceCount;
    uint tlasInstanceIsDynamicBits[(MAX_TOP_LEVEL_INSTANCE_COUNT + 31) / 32];
    uint skyboxTlasInstanceIsDynamicBits[(MAX_TOP_LEVEL_INSTANCE_COUNT + 31) / 32];
};

vec3 getTangent(vec3 localPos[3], vec2 texCoord[3])
{
    const vec3 e1 = localPos[1] - localPos[0];
    const vec3 e2 = localPos[2] - localPos[0];

    const float x1 = texCoord[1].x - texCoord[0].x;
    const float x2 = texCoord[2].x - texCoord[0].x;

    const float y1 = texCoord[1].y - texCoord[0].y;
    const float y2 = texCoord[2].y - texCoord[0].y;

    const float invDet = 1.0 / (x1 * y2 - x2 * y1);

    return normalize((e1 * y2 - e2 * y1) * invDet);
}

void main()
{
    // TODO:
    //skyboxTlasInstanceCount;
    
    for (uint tlasInstanceIndex = 0; tlasInstanceIndex < tlasInstanceCount; tlasInstanceIndex++)
    {
        const bool isDynamic = (tlasInstanceIsDynamicBits[tlasInstanceIndex / 32] & (1 << tlasInstanceIndex)) != 0;

        if (isDynamic)
        {
            #define VERTEX_PREPROCESS_PARTIAL_DYNAMIC
            #include "VertexPreprocessPartial.inl"
        }
        /*else if (preprocessMode == VERT_PREPROC_MODE_DYNAMIC_AND_MOVABLE)
        {       
            #define VERTEX_PREPROCESS_PARTIAL_MOVABLE
            #include "VertexPreprocessPartial.inl"
        }*/
        else if (preprocessMode == VERT_PREPROC_MODE_ALL)
        {       
            #define VERTEX_PREPROCESS_PARTIAL_STATIC
            #include "VertexPreprocessPartial.inl"
        }
    }
}