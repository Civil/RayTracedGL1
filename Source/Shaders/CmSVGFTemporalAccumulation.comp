// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// Copyright (c) 2018, Christoph Schied
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Karlsruhe Institute of Technology nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#version 460

// "Spatiotemporal Variance-Guided Filtering: Real-Time Reconstruction for Path-Traced Global Illumination", C.Schied et al.
// 4.1 Temporal Filtering

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_SVGF_TEMPORAL_GROUP_SIZE_X, local_size_y = COMPUTE_SVGF_TEMPORAL_GROUP_SIZE_X, local_size_z = 1) in;


void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (pix.x >= uint(globalUniform.renderWidth) || pix.y >= uint(globalUniform.renderHeight))
    {
        return;
    }

    const vec2 posPrev = getPrevScreenPos(framebufMotion_Sampler, pix);

    const ivec2 pixPrev = ivec2(floor(posPrev - 0.5));
    const vec2 subPix = (posPrev - 0.5) - floor(posPrev - 0.5);

    const float bilinearWeights[2][2] = 
    {
        { (1.0 - subPix.x) * (1.0 - subPix.y), subPix.x * (1.0 - subPix.y) },
        { (1.0 - subPix.x) * subPix.y,         subPix.x * subPix.y         },
    };

    const vec3 unfilteredDiff = texelFetchUnfilteredDirect(pix);
    const SH unfilteredIndirSH = texelFetchUnfilteredIndirectSH(pix);
    const vec3 unfilteredSpec = 
        texelFetchUnfilteredDirectSpecular(pix) + 
        texelFetchUnfilteredIndirectSpecular(pix);

    const float motionZ = texelFetch(framebufMotion_Sampler,    pix,    0).z;

    const float depth   = texelFetch(framebufDepth_Sampler,     pix,    0).r;
    const vec3 normal   = texelFetchNormalGeometry(             pix);

    const float l = getLuminance(unfilteredDiff);
    const vec2 moments = vec2(l, l * l);

    // history length for direct, indirect, specular
    vec3 historyLengthDIS = vec3(0.0);
    vec3 diffPrev = vec3(0.0);
    vec2 momentsPrev = vec2(0.0);
    vec3 specPrev = vec3(0.0);
    SH indirPrev = newSH();
    float weightSum = 0.0;

    // 2x2 tap bilinear interpolation
    for (int yy = 0; yy <= 1; yy++)
    {
        for(int xx = 0; xx <= 1; xx++)
        {
            const ivec2 xy = pixPrev + ivec2(xx, yy);

            const float depthPrev = texelFetch(framebufDepth_Prev_Sampler, xy, 0).r;
            const vec3 normalPrev = texelFetchNormalGeometry_Prev(         xy);

            const bool isConsistent = 
                testInside(xy, screenSize) &&
                testReprojectedDepth(depth, depthPrev, motionZ) &&
                testReprojectedNormal(normal, normalPrev);

            if (isConsistent)
            {
                const float weight = bilinearWeights[yy][xx];

                historyLengthDIS += texelFetch(framebufAccumHistoryLength_Prev_Sampler, xy, 0).rgb * weight;

                diffPrev         += texelFetch(framebufDiffColorHistory_Sampler,        xy, 0).rgb * weight;
                momentsPrev      += texelFetch(framebufDiffAccumMoments_Prev_Sampler,   xy, 0).rg  * weight;
                specPrev         += texelFetchSpecAccumColor_Prev(                      xy   )     * weight;
                
                accumulateSH(indirPrev, texelFetchIndirAccumSH_Prev(xy), weight);

                weightSum += weight;
			}
        }
    }
    
    const vec4 gradDiffSpec = texelFetch(framebufDiffAndSpecPingGradient_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0);
    const float gradIndir = texelFetch(framebufIndirPingGradient_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0).r;

    vec3 diffColorAccum;
    vec2 diffMomentsAccum;
    float diffHistoryLengthAccum;

    vec3 specColorAccum;
    float specHistoryLengthAccum;

    SH indirSHAccum;
    float indirHistoryLengthAccum;

    // found consistent info
    if (weightSum > 0.0001)
    {
        const float invWeightSum = 1.0 / weightSum;

        historyLengthDIS  *= invWeightSum;
        diffPrev          *= invWeightSum;
        momentsPrev       *= invWeightSum;
        specPrev          *= invWeightSum;
        multiplySH(indirPrev, invWeightSum);

        float diffHistoryLength  = historyLengthDIS[0];
        float indirHistoryLength = historyLengthDIS[1];
        float specHistoryLength  = historyLengthDIS[2]; 
        
        // direct diffuse
        {
            const float antilagAlpha = getAntilagAlpha(gradDiffSpec.r, gradDiffSpec.g);

            diffHistoryLength *= pow(1.0 - antilagAlpha, 10);
            diffHistoryLength = clamp(diffHistoryLength + 1.0, 1.0, 256.0);

            const float minAlpha = 0.01;
            float alphaColor   = max(minAlpha, 1.0 / diffHistoryLength);
            float alphaMoments = max(minAlpha, 1.0 / diffHistoryLength);

            alphaColor   = mix(alphaColor,   1.0, antilagAlpha);
            alphaMoments = mix(alphaMoments, 1.0, antilagAlpha);

            diffColorAccum   = mix(diffPrev, unfilteredDiff, alphaColor);
            diffMomentsAccum = mix(momentsPrev, moments, alphaMoments);
            diffHistoryLengthAccum = diffHistoryLength;
        }

        // specular
        {
            const float roughness = texelFetch(framebufMetallicRoughness_Sampler, pix, 0).g;

            float antilagAlpha = getAntilagAlpha(gradDiffSpec.b, gradDiffSpec.a);
            antilagAlpha *= (1 - roughness) * 0.9 + 0.1;

            float histLenMin = mix(4.0, 32.0, roughness);

            specHistoryLength *= pow(1.0 - antilagAlpha, 5);
            specHistoryLength = clamp(specHistoryLength + 1.0, histLenMin, 256.0);

            const float minAlpha = 0.01;
            float alphaColor = max(minAlpha, 1.0 / specHistoryLength);

            alphaColor = mix(alphaColor, 1.0, antilagAlpha);

            specColorAccum = mix(specPrev, unfilteredSpec, alphaColor);
            specHistoryLengthAccum = specHistoryLength;
        }

        // indirect diffuse
        {
            float antilagAlpha = gradIndir.r;

            indirHistoryLength *= pow(1.0 - antilagAlpha, 10);
            indirHistoryLength = clamp(indirHistoryLength + 1.0, 1.0, 256.0);

            const float minAlpha = 0.01;
            float alphaColor = max(minAlpha, 1.0 / indirHistoryLength);

            alphaColor = mix(alphaColor, 1.0, antilagAlpha);

            indirSHAccum = mixSH(indirPrev, unfilteredIndirSH, alphaColor);
            indirHistoryLengthAccum = indirHistoryLength;
        }
    }
    else
    {
        diffColorAccum = unfilteredDiff;
        diffMomentsAccum = moments;
        diffHistoryLengthAccum = 1.0;

        specColorAccum = unfilteredSpec;
        specHistoryLengthAccum = 1.0;

        indirSHAccum = unfilteredIndirSH;
        indirHistoryLengthAccum = 1.0;
    }

    imageStoreDiffAccumColor(               pix, diffColorAccum);
    imageStore(framebufDiffAccumMoments,    pix, vec4(diffMomentsAccum, 0.0, 0.0));
    imageStore(framebufAccumHistoryLength,  pix, vec4(diffHistoryLengthAccum, indirHistoryLengthAccum, specHistoryLengthAccum, 0.0));

    imageStoreSpecAccumColor(               pix, specColorAccum);
    imageStoreSpecPingColor(                pix, specColorAccum);

    imageStoreIndirAccumSH(                 pix, indirSHAccum);
    imageStoreIndirPingSH(                  pix, indirSHAccum);
}