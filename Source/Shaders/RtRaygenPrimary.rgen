// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

layout (constant_id = 0) const uint maxAlbedoLayerCount = 0;
#define MATERIAL_MAX_ALBEDO_LAYERS maxAlbedoLayerCount

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define DESC_SET_CUBEMAPS 7
#define DESC_SET_RENDER_CUBEMAP 8
#include "RaygenCommon.h"

vec3 getRayDir(vec2 inUV)
{
    inUV = inUV * 2.0 - 1.0;
    
    const vec4 target = globalUniform.invProjection * vec4(inUV.x, inUV.y, 1, 1);
    const vec4 rayDir = globalUniform.invView * vec4(normalize(target.xyz / target.w), 0);
    
    return rayDir.xyz;
}

vec2 getPixelUV()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    return pixelCenter / vec2(gl_LaunchSizeEXT.xy);
}

void storeSky(const ivec2 pix, const vec3 rayDir, bool calculateSkyAndStoreToAlbedo, float firstHitDepthNDC)
{
    if (calculateSkyAndStoreToAlbedo)
    {
        imageStoreAlbedoSky(                pix, getSkyPrimary(rayDir));
    }
    else
    {
        // resave sky albedo in a special format
        imageStoreAlbedoSky(                pix, texelFetchAlbedo(pix).rgb);
    }

    imageStoreNormal(                       pix, vec3(0.0));
    imageStoreNormalGeometry(               pix, vec3(0.0));
    imageStore(framebufMetallicRoughness,   pix, vec4(0.0));
    imageStore(framebufDepth,               pix, vec4(MAX_RAY_LENGTH * 2.0, 0.0, 0.0, firstHitDepthNDC));
    imageStore(framebufMotion,              pix, vec4(0.0));
    imageStore(framebufSurfacePosition,     pix, vec4(0.0));
    imageStore(framebufVisibilityBuffer,    pix, vec4(UINT32_MAX));
    imageStore(framebufViewDirection,       pix, vec4(rayDir, 0.0));
}

void main() 
{
    const ivec2 pix = getCheckerboardPix(ivec2(gl_LaunchIDEXT.xy));
    const vec2 inUV = getPixelUV();

    const float AX = 1.0 / globalUniform.renderWidth;
    const float AY = 1.0 / globalUniform.renderHeight;

    vec3 rayDir   = getRayDir(inUV);
    const vec3 rayDirAX = getRayDir(inUV + vec2(AX, 0.0));
    const vec3 rayDirAY = getRayDir(inUV + vec2(0.0, AY));

    const uint randomSeed = getRandomSeed(pix, globalUniform.frameId, globalUniform.renderWidth, globalUniform.renderHeight);
    imageStore(framebufRandomSeed, pix, uvec4(randomSeed));
    
    
    const vec3 cameraOrigin = globalUniform.cameraPosition.xyz;
    ShPayload payload = tracePrimaryRay(cameraOrigin, rayDir);


    // was no hit
    if (!isPayloadConsistent(payload))
    {
        // if sky is a rasterized geometry, it was already rendered to albedo framebuf 
        storeSky(pix, rayDir, globalUniform.skyType != SKY_TYPE_RASTERIZED_GEOMETRY, MAX_RAY_LENGTH * 2.0);
        return;
    }


    vec2 motionCurToPrev;
    float motionDepthLinearCurToPrev;
    vec2 gradDepth;
    float firstHitDepthNDC;
    float screenEmission;
    ShHitInfo h = getHitInfoPrimaryRay(payload, cameraOrigin, rayDirAX, rayDirAY, 1.0, motionCurToPrev, motionDepthLinearCurToPrev, gradDepth, firstHitDepthNDC, screenEmission);


    for (int i = 0; i < 2; i++)
    {
        if ((unpackInstanceIdAndCustomIndex(payload.instIdAndIndex).y & INSTANCE_CUSTOM_INDEX_FLAG_REFLECT) != 0)
        {
            // water
            const float refractionIndex = 1.0 / 1.1; // 1.0 / 1.33;
            const bool isRefraction = isCheckerboardPixOdd(pix) != 0;

            if (dot(h.normal, -rayDir) < 0.0)
            {
                h.normal *= -1;
            }

            h.normal = normalize(h.normal + 0.1 * vec3(h.albedo.r - 0.5, h.albedo.b - 0.5, h.albedo.g - 0.5));

            if (isRefraction)
            {
                rayDir = refract(rayDir, h.normal, refractionIndex);
            }
            else
            {
                rayDir = reflect(rayDir, h.normal);
            }

            
            payload = traceReflectionRefractionRay(h.hitPosition, rayDir, isRefraction);

            
            if (!isPayloadConsistent(payload))
            {
                storeSky(pix, rayDir, true, firstHitDepthNDC);
                return;  
            }

            float depthNDC;
            h = getHitInfoPrimaryRay(payload, cameraOrigin, rayDirAX, rayDirAY, 0.0, motionCurToPrev, motionDepthLinearCurToPrev, gradDepth, depthNDC, screenEmission);
        }
        else
        {
            break;
        }
    }


    imageStoreAlbedoSurface(                pix, h.albedo, screenEmission);
    imageStoreNormal(                       pix, h.normal);
    imageStoreNormalGeometry(               pix, h.normalGeom);
    imageStore(framebufMetallicRoughness,   pix, vec4(h.metallic, h.roughness, 0, 0));
    // save only the first hit's depth for rasterization, as reflections/refraction only may be losely represented via rasterization
    imageStore(framebufDepth,               pix, vec4(h.linearDepth, gradDepth, firstHitDepthNDC));
    imageStore(framebufMotion,              pix, vec4(motionCurToPrev, motionDepthLinearCurToPrev, 0.0));
    imageStore(framebufSurfacePosition,     pix, vec4(h.hitPosition, uintBitsToFloat(h.instCustomIndex)));
    imageStore(framebufVisibilityBuffer,    pix, packVisibilityBuffer(payload));
    imageStore(framebufViewDirection,       pix, vec4(rayDir, 0.0));
}
