// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#include "RaygenCommon.h"

void processPrimaryHit(vec3 hitPosition, ivec2 pix)
{
    ShHitInfo h = getHitInfo(payload);

    imageStore(framebufAlbedo,              pix, vec4(h.albedo, 0));
    imageStore(framebufNormal,              pix, vec4(h.normal, 0));
    imageStore(framebufNormalGeometry,      pix, vec4(h.normalGeom, 0));
    imageStore(framebufMetallicRoughness,   pix, vec4(h.metallic, max(h.roughness, 0.001), 0, uintBitsToFloat(h.instCustomIndex)));
    imageStore(framebufDepth,               pix, vec4(h.hitDistance));
    imageStore(framebufSurfacePosition,     pix, vec4(hitPosition, 0.0));
}

void main() 
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = globalUniform.invView * vec4(0, 0, 0, 1);
    vec4 target = globalUniform.invProjection * vec4(d.x, d.y, 1, 1);
    vec4 viewDirection = globalUniform.invView * vec4(normalize(target.xyz / target.w), 0);

    imageStore(framebufViewDirection, pix, viewDirection);

    uint randomSeed = getRandomSeed(pix, globalUniform.frameId, globalUniform.renderWidth, globalUniform.renderHeight);
    imageStore(framebufRandomSeed, pix, uvec4(randomSeed));

    imageStore(framebufLightIndirect, pix, vec4(0.0));
    
    // start color is fully transparent black and dist = 0,
    // so the first tranparent-blended (additive or under) surface 
    // could overwrite these values
    resetPayload();
    

    uint cullMask = INSTANCE_MASK_ALL & (~INSTANCE_MASK_FIRST_PERSON_VIEWER);

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsNoneEXT, 
        cullMask, 
        0, 0,     // sbtRecordOffset, sbtRecordStride
        SBT_INDEX_MISS_DEFAULT, 
        origin.xyz, 0.001, viewDirection.xyz, MAX_RAY_LENGTH, 
        PAYLOAD_INDEX_DEFAULT);    

    vec4 color;

    // was hit
    if (payload.clsHitDistance > 0)
    {
        vec3 clsHitPoint = origin.xyz + viewDirection.xyz * payload.clsHitDistance;

        // if transparency hit distance is further than the closest hit,
        // then need to cast again, but new ray's max distance is clsHitDistance
        if (payload.maxTransparDistance > payload.clsHitDistance)
        {
            payload.color = vec4(0.0);
            payload.maxTransparDistance = -1;
            
            // trace again, without closest hit shader,
            // so any-hit will gather transparency info
            traceRayEXT(
                topLevelAS,
                gl_RayFlagsNoneEXT, 
                cullMask, 
                0, 0,     // sbtRecordOffset, sbtRecordStride
                SBT_INDEX_MISS_DEFAULT, 
                origin.xyz, 0.001, viewDirection.xyz, payload.clsHitDistance, 
                PAYLOAD_INDEX_DEFAULT);    
        }
        
        processPrimaryHit(origin.xyz + viewDirection.xyz * payload.clsHitDistance, pix);
    }
    else
    {
        // sky
        color = vec4(0.85, 0.95, 1.0, 0.0);

        imageStore(framebufAlbedo,              pix, color);
        imageStore(framebufNormal,              pix, vec4(0.0));
        imageStore(framebufNormalGeometry,      pix, vec4(0.0));
        imageStore(framebufMetallicRoughness,   pix, vec4(0, 0, 0, uintBitsToFloat(0)));
        imageStore(framebufDepth,               pix, vec4(MAX_RAY_LENGTH));
        // imageStore(framebufSurfacePosition,      pix, vec4(0.0));
    }
}
