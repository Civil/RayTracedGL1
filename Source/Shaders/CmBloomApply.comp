// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_BLOOM_APPLY_GROUP_SIZE_X, local_size_y = COMPUTE_BLOOM_APPLY_GROUP_SIZE_Y, local_size_z = 1) in;

layout(constant_id = 0) const uint sourceFramebufIndex = 0;

layout(push_constant) uniform BloomPush_BT
{
    uint forceIsSky;
} push;

vec2 getInverseSrcSize()
{
    switch (sourceFramebufIndex)
    {
        case FB_IMAGE_INDEX_FINAL:         return vec2(1.0 / globalUniform.renderWidth, 1.0 / globalUniform.renderHeight);
        case FB_IMAGE_INDEX_UPSCALED_PING: return vec2(1.0 / globalUniform.upscaledRenderWidth, 1.0 / globalUniform.upscaledRenderHeight);
        case FB_IMAGE_INDEX_UPSCALED_PONG: return vec2(1.0 / globalUniform.upscaledRenderWidth, 1.0 / globalUniform.upscaledRenderHeight);
    }

    return vec2(0);
}

// get UV coords in [0..1] range
vec2 getSrcUV(const ivec2 pix)
{
    return (vec2(pix) + 0.5) * getInverseSrcSize();
}

#define LOAD_AND_ADD(_framebuf, _pix, _x) \
    imageStore(_framebuf, _pix, vec4(imageLoad(_framebuf, _pix).rgb + (_x), 0.0));

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const vec2 uv = getSrcUV(pix);

    if (uv.x > 1.0 || uv.y > 1.0)
    {
        return;
    }

    const vec3 bloom = globalUniform.bloomIntensity * textureLod(framebufBloom_Result_Sampler, uv, 0).rgb;
    
    switch (sourceFramebufIndex)
    {
        case FB_IMAGE_INDEX_FINAL:         LOAD_AND_ADD(framebufFinal, pix, bloom);        break;
        case FB_IMAGE_INDEX_UPSCALED_PING: LOAD_AND_ADD(framebufUpscaledPing, pix, bloom); break;
        case FB_IMAGE_INDEX_UPSCALED_PONG: LOAD_AND_ADD(framebufUpscaledPong, pix, bloom); break;
    }
}