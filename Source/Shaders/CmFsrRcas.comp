// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = 64) in;

layout(push_constant) uniform FsrPush_BT
{
    uvec4 con0;
    uvec4 con1_Unused;
    uvec4 con2_Unused;
    uvec4 con3_Unused;
} push;

    // FSR impl
    #define INPUT_TEXTURE framebufUpscaledIntermediary_Sampler
    #define OUTPUT_IMAGE framebufUpscaledOutput

    #define A_GPU 1
    #define A_GLSL 1
    #define A_HALF 1
    #include "FSR/ffx_a.h"

    #define FSR_RCAS_H 1
    AH4 FsrRcasLoadH(ASW2 p) { return AH4(texelFetch(INPUT_TEXTURE, ASU2(p), 0)); }
    void FsrRcasInputH(inout AH1 r, inout AH1 g, inout AH1 b) {}
    #include "FSR/ffx_fsr1.h"

void storeOutput(const AH3 Gamma2Color, const AU2 gxy)
{
    imageStore(OUTPUT_IMAGE, ASU2(gxy), AH4(pow(Gamma2Color, AH3(FIDELITY_SUPER_RESOLUTION_GAMMA_SPACE)), 1));
}

void main()
{
    AH3 Gamma2Color = AH3(0, 0, 0);
    AU2 gxy = ARmp8x8(gl_LocalInvocationID.x) + AU2(gl_WorkGroupID.x << 4u, gl_WorkGroupID.y << 4u);
	
    FsrRcasH(Gamma2Color.r, Gamma2Color.g, Gamma2Color.b, gxy, push.con0);
    storeOutput(Gamma2Color, gxy);

	gxy.x += 8u;
    FsrRcasH(Gamma2Color.r, Gamma2Color.g, Gamma2Color.b, gxy, push.con0);
    storeOutput(Gamma2Color, gxy);

	gxy.y += 8u;
    FsrRcasH(Gamma2Color.r, Gamma2Color.g, Gamma2Color.b, gxy, push.con0);
    storeOutput(Gamma2Color, gxy);

	gxy.x -= 8u;
    FsrRcasH(Gamma2Color.r, Gamma2Color.g, Gamma2Color.b, gxy, push.con0);
    storeOutput(Gamma2Color, gxy);
}