// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = 64) in;

layout(push_constant) uniform FsrPush_BT
{
    uvec4 con0;
    uvec4 con1;
    uvec4 con2;
    uvec4 con3;
} push;

    // FSR impl 
    #define INPUT_TEXTURE framebufFinal_Sampler
    #define OUTPUT_IMAGE framebufUpscaledIntermediary

    #define A_GPU 1
    #define A_GLSL 1
    #define A_HALF 1
    #include "ffx_a.h"

    #define FSR_EASU_H 1
    AH4 FsrEasuRH(AF2 p) { AH4 res = AH4(textureGather(INPUT_TEXTURE, p, 0)); return pow(res, AH4(1.0 / FIDELITY_SUPER_RESOLUTION_GAMMA_SPACE)); }
    AH4 FsrEasuGH(AF2 p) { AH4 res = AH4(textureGather(INPUT_TEXTURE, p, 1)); return pow(res, AH4(1.0 / FIDELITY_SUPER_RESOLUTION_GAMMA_SPACE)); }
    AH4 FsrEasuBH(AF2 p) { AH4 res = AH4(textureGather(INPUT_TEXTURE, p, 2)); return pow(res, AH4(1.0 / FIDELITY_SUPER_RESOLUTION_GAMMA_SPACE)); }
    #include "ffx_fsr1.h"

void main()
{
    AH3 Gamma2Color = AH3(0, 0, 0);
    AU2 gxy = ARmp8x8(gl_LocalInvocationID.x) + AU2(gl_WorkGroupID.x << 4u, gl_WorkGroupID.y << 4u);
    
    FsrEasuH(Gamma2Color, gxy, push.con0, push.con1, push.con2, push.con3);
    imageStore(OUTPUT_IMAGE, ASU2(gxy), AH4(Gamma2Color, 1));

	gxy.x += 8u;
    FsrEasuH(Gamma2Color, gxy, push.con0, push.con1, push.con2, push.con3);
    imageStore(OUTPUT_IMAGE, ASU2(gxy), AH4(Gamma2Color, 1));

	gxy.y += 8u;
    FsrEasuH(Gamma2Color, gxy, push.con0, push.con1, push.con2, push.con3);
    imageStore(OUTPUT_IMAGE, ASU2(gxy), AH4(Gamma2Color, 1));

	gxy.x -= 8u;
    FsrEasuH(Gamma2Color, gxy, push.con0, push.con1, push.con2, push.con3);
    imageStore(OUTPUT_IMAGE, ASU2(gxy), AH4(Gamma2Color, 1));
}