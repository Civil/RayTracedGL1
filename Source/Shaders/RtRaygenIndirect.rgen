// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define DESC_SET_CUBEMAPS 7
#define RAYGEN_SHADOW_PAYLOAD
#include "RaygenCommon.h"

// v -- direction to viewer
// n -- surface normal
void getBounce(
    uint seed, vec3 n, float roughness, 
    vec3 v, out vec3 bounceDirection, inout vec3 throughput, bool isSpecular)
{
    if (isSpecular)
    {
        const vec4 u = getRandomSample(seed, RANDOM_SALT_SPEC_BOUNCE(0));

        // sample microfacet normal
        const vec3 m = sampleSmithGGX(n, v, roughness, u[0], u[1]);

        // light sample; incident vector must point to surface
        const vec3 l = normalize(reflect(-v, m));

        const float nl = max(dot(n, l), 0.0);
        const float nv = max(dot(n, v), 0.0);

        if (nl > 0 && nv > 0)
        {
            bounceDirection = l;
            
            // "Sampling the GGX Distribution of Visible Normals", Heitz
            // equation 19: F * G2(v,l) / G1(v)
            // let G2 be the simplest: G2(v,l) = G1(v) * G1(l)
            // => F * G1(l)
            
            const float F = 1.0f; // getFresnelSchlick(nl, n1, n2);
            const float G1 = G1GGX(l, n, roughness);

            throughput *= G1;
            // throughput *= 1 / specPr;
        }
    }
    else
    {
        const vec4 u = getRandomSample(seed, RANDOM_SALT_DIFF_BOUNCE(0));

        bounceDirection = sampleLambertian(n, u[0], u[1]);
        throughput *= evalBRDFLambertian(1.0);
        // throughput *= 1 / nonSpecPr;
    }
}

// v -- direction to viewer
void processIndirectIllumination(
    const ivec2 pix, const uint primaryInstCustomIndex, const vec3 surfPosition, 
    const vec3 surfNormal, const vec3 surfNormalGeom,
    const float surfRoughness, const vec3 v, const bool isGradientSample)
{
    const uint seed = getCurrentRandomSeed(pix);
    
    for (int i = 0; i < 2; i++)
    {
        const bool isSpecular = i == 0;
        vec3 throughput = vec3(1.0);
        vec3 bounceDirection;
        getBounce(seed, surfNormal, surfRoughness, v, bounceDirection, throughput, isSpecular);

        // got the bounce direction, trace ray
        const ShPayload p = traceIndirectRay(primaryInstCustomIndex, surfPosition, bounceDirection); 

        vec3 contribution;

        if (p.clsHitDistance > 0)
        {
            const ShHitInfo h = getHitInfo(p);
            const vec3 hitPos = surfPosition + p.clsHitDistance * bounceDirection;
            
            // TODO: emmision

            // calculate direct illumination in hit position
            vec3 diffuse, specular;
            processDirectIllumination(pix, primaryInstCustomIndex, hitPos, h.normal, h.normalGeom, h.roughness, bounceDirection, isGradientSample, diffuse, specular);

            // TODO: Ray Tracing Gems, ch. 20.3.2-20.3.3: 
            // calculate texture lod with ray differentials using G-buffer for the first bounce
            throughput *= h.albedo;

            //contribution = throughput * (diffuse * (1 - metallic) + specular * metallic);
            contribution = throughput * diffuse;
        }
        else
        {
            const vec3 skyColor = getSky(bounceDirection);
            contribution = throughput * skyColor;
        }

        if (isSpecular)
        {
            vec3 spec = imageLoad(framebufUnfilteredSpecular, pix).rgb;
            spec += contribution;

            imageStore(framebufUnfilteredSpecular, pix, vec4(spec, 0.0));
        }
        else
        {
            const SH bounceSh = irradianceToSH(contribution, bounceDirection);

            SH sh = imageLoadUnfilteredIndirectSH(pix);
            accumulateSH(sh, bounceSh, 1.0);

            imageStoreUnfilteredIndirectSH(pix, sh);
        }
    }
}

void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);

    const float depth = texelFetch(framebufDepth_Sampler, pix, 0).r;

    if (depth > MAX_RAY_LENGTH)
    {
        return;
    }
    
    const vec4 surfPosition           = texelFetch(framebufSurfacePosition_Sampler, pix, 0);
    const vec4 surfNormal             = texelFetch(framebufNormal_Sampler, pix, 0);
    const vec4 surfNormalGeom         = texelFetch(framebufNormalGeometry_Sampler, pix, 0);
    const vec4 surfMetallicRoughness  = texelFetch(framebufMetallicRoughness_Sampler, pix, 0);
    const vec4 viewDirection          = texelFetch(framebufViewDirection_Sampler, pix, 0);
    const uint grFB                   = texelFetch(framebufGradientSamples_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0).x;
    const float surfRoughness         = surfMetallicRoughness.g;
    const uint instCustomIndex        = floatBitsToUint(surfNormal.a);
  
    const bool isGradientSample       = (pix.x % COMPUTE_ASVGF_STRATA_SIZE) == (grFB % COMPUTE_ASVGF_STRATA_SIZE) &&
                                        (pix.y % COMPUTE_ASVGF_STRATA_SIZE) == (grFB / COMPUTE_ASVGF_STRATA_SIZE);

    processIndirectIllumination(pix, instCustomIndex, surfPosition.xyz, surfNormal.xyz, surfNormalGeom.xyz, surfRoughness, -viewDirection.xyz, isGradientSample);        
}