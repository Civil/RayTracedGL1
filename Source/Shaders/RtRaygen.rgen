// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#define DESC_SET_GLOBAL_UNIFORM 2
#include "ShaderCommonGLSLFunc.h"

layout(binding = BINDING_ACCELERATION_STRUCTURE, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = BINDING_STORAGE_IMAGE, set = 1, rgba8) uniform image2D image;

layout(location = 0) rayPayloadEXT ShPayload payload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = globalUniform.invView * vec4(0, 0, 0, 1);
	vec4 target = globalUniform.invProjection * vec4(d.x, d.y, 1, 1) ;
	vec4 dir = globalUniform.invView * vec4(normalize(target.xyz / target.w), 0) ;

	// start color is fully transparent black and dist = 0,
	// so the first tranparent-blended (additive or under) surface 
	// could overwrite these values
	payload.color = vec4(0.0);
	payload.tranparDistance = 0;

	traceRayEXT(
		topLevelAS,
		gl_RayFlagsNoneEXT, 
		0xFF, 
		0, 0, 	// sbtRecordOffset, sbtRecordStride
		0, 		// missIndex
		origin.xyz, 0.001, dir.xyz, 10000.0, 
		0);		// payload

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color.rgb, 0.0));
}
