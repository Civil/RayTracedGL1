// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// "Gradient Estimation for Real-Time Adaptive Temporal Filtering", C.Schied et al.

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_VERTEX_DATA 2
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_SVGF_GROUP_SIZE_X, local_size_y = COMPUTE_SVGF_GROUP_SIZE_Y, local_size_z = 1) in;

void main()
{
    const ivec2 gradPix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (gradPix.x * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.x || gradPix.y * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.y)
    {
        return;
    }

    const uvec2 prevStrataPos = texelFetch(framebufGradientSamples_Prev_Sampler, gradPix, 0).xy;

    // (c) was done in primary rays shader
    // (a) instead of choosing random sample in strata, choose the brightest
    ivec2 lastStrataPos = ivec2(0);
    float lastLuminance = 0;
    bool found = false;

    // for each pixel in strata
    for (int yy = 0; yy < COMPUTE_ASVGF_STRATA_SIZE; yy++)
    {
        for (int xx = 0; xx < COMPUTE_ASVGF_STRATA_SIZE; xx++)
        {
            const ivec2 prevPix = gradPix * COMPUTE_ASVGF_STRATA_SIZE + ivec2(xx, yy);

            const vec3 prevColor = texelFetch(framebufUnfilteredDirect_Sampler, prevPix, 0).rgb;
            const float prevLuminance = getLuminance(prevColor);

            if (lastLuminance < prevLuminance && !(prevStrataPos.x == xx && prevStrataPos.y == yy))
            {
                lastStrataPos = ivec2(xx, yy);
                lastLuminance = prevLuminance;
                found = true;
            }
        }
    }

    if (!found)
    {
        imageStore(framebufGradientSamples, gradPix, uvec4(0));
        return;
    }

    const ivec2 samplePrevPix = gradPix * COMPUTE_ASVGF_STRATA_SIZE + lastStrataPos;

    // (b) forward-project choosen sample
    const vec2 motion     = texelFetch(framebufMotion_Sampler,              samplePrevPix, 0).rg;
    const ivec2 samplePix = ivec2(floor(getPrevScreenPos(samplePrevPix, motion)));

    const vec3 depthFB    = texelFetch(framebufDepth_Sampler,               samplePix,     0).rgb;
    const float dz        = 1.0 / max(0.01, length(depthFB.gb));

    const float depth     = depthFB.r;
    const float depthPrev = texelFetch(framebufDepth_Prev_Sampler,          samplePrevPix, 0).r;

    const vec3 normal     = texelFetch(framebufNormalGeometry_Sampler,      samplePix,     0).rgb;
    const vec3 normalPrev = texelFetch(framebufNormalGeometry_Prev_Sampler, samplePrevPix, 0).rgb;

    const bool isConsistent = 
        testInside(samplePix, screenSize) &&
        testReprojectedDepth(depth, depthPrev, dz) &&
        testReprojectedNormal(normal, normalPrev);

    if (!isConsistent)
    {
        imageStore(framebufGradientSamples, gradPix, uvec4(0));
        return;
    }

    // save position in strata and mark that strata has gradient sample
    imageStore(framebufGradientSamples, gradPix, uvec4(lastStrataPos, 1, floatBitsToUint(lastLuminance)));
    
    // (d) merge new samples with chosen forward-projected sample 
    // from previous frame before tracing illumination
    
    // seeds
    uint oldSeed = texelFetch(framebufRandomSeed_Prev_Sampler, samplePrevPix, 0).r;
    imageStore(framebufRandomSeed,        samplePix, uvec4(oldSeed));
    
    // surface shading samples
    imageStore(framebufNormalGeometry,    samplePix, vec4(normalPrev, 0));
    imageStore(framebufNormal,            samplePix, texelFetch(framebufNormal_Prev_Sampler,            samplePrevPix, 0));
    imageStore(framebufMetallicRoughness, samplePix, texelFetch(framebufMetallicRoughness_Prev_Sampler, samplePrevPix, 0));

    vec3 prevPos;
    const vec4 v = texelFetch(framebufVisibilityBuffer_Prev_Sampler, samplePrevPix, 0);
    const bool matchedSurface = unpackPrevVisibilityBuffer(v, prevPos);
    
    if (matchedSurface)
    {
        const vec3 viewDir = normalize(prevPos - globalUniform.cameraPosition.xyz);

        imageStore(framebufSurfacePosition, samplePix, vec4(prevPos, 0.0));
        imageStore(framebufViewDirection,   samplePix, vec4(viewDir, 0.0));
    }
}